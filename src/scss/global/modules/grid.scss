@import "../variables";
@import "../colors";
@import "../utility-mixins";

// Grid
//
// Used to separate content.
//
// This is a point of contention because a base-10 grid would work great; But in order to get pixel perfection of the PSD, we need this fine granularity.
//
// We use a float-based grid because `inline-block` has problems with white-space which can be mitigated with `font-size: 0; line-height: 0;` but then requires you to override again to set the font-size back to something useful for the children.
//
// Styleguide 5.



// Grid 50's
//
// Fifty's grid. The grid can be used anywhere but it was coded for use in the `.main-section` and `.main-section-body`.
//
// *Ignore the `.sg-grid-sandbox` wrapping div. This is only for showing of fthe grid in the styleguide.*
//
// Markup:
// <div class="sg-grid-sandbox">
// 	<div class="grid">
// 		<div class="grid-item-10-50"><div class="sg-grid-item-fill">10</div></div>
// 		<div class="grid-item-40-50"><div class="sg-grid-item-fill">40</div></div>
// 	</div>
// 	<div class="grid">
// 		<div class="grid-item-13-50"><div class="sg-grid-item-fill">13</div></div>
// 		<div class="grid-item-37-50"><div class="sg-grid-item-fill">37</div></div>
// 	</div>
// 	<div class="grid">
// 		<div class="grid-item-15-50"><div class="sg-grid-item-fill">15</div></div>
// 		<div class="grid-item-15-50"><div class="sg-grid-item-fill">15</div></div>
// 		<div class="grid-item-20-50"><div class="sg-grid-item-fill">30</div></div>
// 	</div>
// 	<div class="grid">
// 		<div class="grid-item-20-50"><div class="sg-grid-item-fill">20</div></div>
// 		<div class="grid-item-30-50"><div class="sg-grid-item-fill">30</div></div>
// 	</div>
// 	<div class="grid">
// 		<div class="grid-item-10-50"><div class="sg-grid-item-fill">10</div></div>
// 		<div class="grid-item-20-50"><div class="sg-grid-item-fill">20</div></div>
// 		<div class="grid-item-20-50"><div class="sg-grid-item-fill">20</div></div>
// 	</div>
// 	<div class="grid">
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 		<div class="grid-item-5-50"><div class="sg-grid-item-fill">5</div></div>
// 	</div>
// </div>
//
// Styleguide 5.1

// Grid 50's with Spacing
//
// Add an inner `.grid-item-inner` div to get some spacing between items/cells. The whole grid system markup could be simpler(*no inner element*) if the old IE's supported `box-sizing: border-box;`
//
// Markup:
// <div class="sg-grid-sandbox">
// 	<div class="grid">
// 		<div class="grid-item-13-50"><div class="grid-item-inner"><div class="sg-grid-item-fill">13</div></div></div>
// 		<div class="grid-item-37-50"><div class="grid-item-inner"><div class="sg-grid-item-fill">37</div></div></div>
// 	</div>
// 	<div class="grid">
// 		<div class="grid-item-10-50"><div class="grid-item-inner"><div class="sg-grid-item-fill">10</div></div></div>
// 		<div class="grid-item-20-50"><div class="grid-item-inner"><div class="sg-grid-item-fill">20</div></div></div>
// 		<div class="grid-item-20-50"><div class="grid-item-inner"><div class="sg-grid-item-fill">20</div></div></div>
// 	</div>
// </div>
//
// Styleguide 5.1.1

@include styleguide
{
	.sg-grid-sandbox > .grid
	{
		margin-bottom: $spacing / 2;
	}

	.sg-grid-item-fill
	{
		display: flex;
		justify-content: center; // horizontal
		align-items: center; // vertical

		width: 100%;
		height: 50px;

		background: rgba($accent-color, 0.8);

		[class*='grid-item-']:nth-of-type(even) &
		{
			background: rgba($accent-color, 0.6);
		}

	}

}


.grid
{
	@include clearfix;

}

.grid-item-inner
{
	// Every grid-item adjacent to another grid-item with the inner element 
	// should get the spacing between.
	[class*='grid-item-'] + [class*='grid-item-'] &
	{
		padding-left: $spacing;
	}
}
	


@mixin generate-grid($columns)
{
	@for $i from 1 through $columns - 1
	{
		.grid-item-#{$i}-#{$columns}
		{
			float: left;
			width: #{percentage($i/$columns)};

			// ie7 always rounds up on sub-pixel rounding so nudge everything into place
			@include ie7
			{
				margin-right: -1px;
			}
		}
	}
}

// Generate a base 10 grid
//@include generate-grid(10);

// Generate a base 50 grid
@include generate-grid(50);